"""
Django settings for web project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from typing import Any

import environ  # pyright: ignore

from ads.settings import *
from myauth.settings import *

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
environ.Env.read_env(BASE_DIR / '.env')  # pyright: ignore


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY', os.environ.get('DJANGO_SECRET_KEY'))  # pyright: ignore

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', False)  # type: ignore[arg-type]

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', None, [''])  # pyright: ignore


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_json_widget',
    'ads',
    'myauth',
    'billing',
    'experiments',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES: list[dict[str, Any]] = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES: dict[str, Any] = {
    'default': env.db('DATABASE_URL', None),  # pyright: ignore
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
if env.bool('ENABLE_PASSWORD_VALIDATION', True):  # type: ignore[arg-type]
    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]
else:
    AUTH_PASSWORD_VALIDATORS = []  # pyright: ignore


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT: Path = env.path('STATIC_ROOT', Path(os.environ['STATIC_ROOT']))  # pyright: ignore

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# apps
CH_HOST: str = env.str('CH_HOST', '')  # pyright: ignore
CH_PORT: int = env.int('CH_PORT', 0)  # pyright: ignore
CH_USER: str = env.str('CH_USER', '')  # pyright: ignore
CH_DATABASE: str = env.str('CH_DATABASE', '')  # pyright: ignore
CH_PASSWORD: str = env.str('CH_PASSWORD', '')  # pyright: ignore
_ch_ssl_cert_path: str | None = env.str('CH_SSL_CERTIFICATE_PATH', None)  # pyright: ignore
CH_SSL_CERTIFICATE_PATH: Path | None = Path(_ch_ssl_cert_path) if _ch_ssl_cert_path else None  # pyright: ignore

REDIS_DATABASE: int = env.int('REDIS_DATABASE', 0)  # pyright: ignore
REDIS_PASSWORD: str = env.str('REDIS_PASSWORD', '')  # pyright: ignore
REDIS_HOST: str = env.str('REDIS_HOST', '')  # pyright: ignore
REDIS_PORT: int = env.int('REDIS_PORT', '')  # pyright: ignore
_redis_ssl_cert_path: str | None = env.str('REDIS_SSL_CERTIFICATE_PATH', None)  # pyright: ignore
REDIS_SSL_CERTIFICATE_PATH: Path | None = Path(_redis_ssl_cert_path) if _redis_ssl_cert_path else None  # pyright: ignore
